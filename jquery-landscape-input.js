// Generated by CoffeeScript 1.6.3
/*
# this plugin is a solution for fixing landscape mode input style
# author: blackbing at gmail dot com
*/


(function() {
  var debounce;

  debounce = function(func, wait, immediate) {
    var args, context, result, timeout, timestamp;
    timeout = void 0;
    args = void 0;
    context = void 0;
    timestamp = void 0;
    result = void 0;
    return function() {
      var callNow, later;
      context = this;
      args = arguments;
      timestamp = new Date();
      later = function() {
        var last;
        last = (new Date()) - timestamp;
        if (last < wait) {
          return timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            return result = func.apply(context, args);
          }
        }
      };
      callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
      }
      return result;
    };
  };

  $.fn.landscapeInput = function() {
    var $this;
    $this = $(this);
    return $this.each(function(el) {
      var $el, $readyElement, checkKeyboard, handover, orientationchanged, placeholder, tagName;
      $el = $(this);
      tagName = $el.prop('tagName');
      placeholder = $el.prop('placeholder');
      $readyElement = $("<" + tagName + " placeholder='" + placeholder + "' style='position:fixed;left:0;top:0;z-index:999999999999;width:100%;height:100%;font-size:18px;display:none;'>");
      $el.data('$readyElement', $readyElement);
      handover = function(orientation, focus) {
        var $focusElement, value;
        if (orientation == null) {
          orientation = 'landscape';
        }
        if (focus == null) {
          focus = 'focus';
        }
        $focusElement = $el;
        $readyElement = $focusElement.data('$readyElement');
        if (orientation === 'landscape') {
          value = $focusElement.val();
          $focusElement.blur();
          return $readyElement.val(value).show().prop('selectionStart', value.length).focus();
        } else if (orientation === 'portrait') {
          value = $readyElement.val();
          $readyElement.hide().remove();
          $focusElement.val(value);
          if (focus === 'focus') {
            return $focusElement.focus().prop('selectionStart', value.length);
          } else {
            return $focusElement.blur();
          }
        }
      };
      checkKeyboard = function($readyElement) {
        var screen;
        screen = window.screen;
        if ($readyElement.height() > screen.height / 2) {
          return handover('portrait', 'dontfocus');
        }
      };
      orientationchanged = function($focusElement) {
        var orientation;
        $(window).off('resize.landscape');
        orientation = Math.abs(window.orientation);
        $readyElement = $focusElement.data('$readyElement');
        $readyElement.appendTo('body');
        if (orientation === 90) {
          handover('landscape');
          return $(window).on('resize.landscape', debounce((function() {
            return checkKeyboard($readyElement);
          }), 200));
        } else {
          return handover('portrait');
        }
      };
      return $el.on('focusin', function($event) {
        var o_changed, orientation;
        $el = $(this);
        orientation = Math.abs(window.orientation);
        o_changed = debounce((function() {
          return orientationchanged($el);
        }), 100);
        if (orientation === 90) {
          o_changed();
        }
        if (!$el.data('bind-orientation')) {
          $(window).on('orientationchange.focusin', o_changed);
          $el.data('bind-orientation', true);
        }
        return $event.preventDefault();
      });
    });
  };

}).call(this);
