// Generated by CoffeeScript 1.6.3
/*
# this plugin is a solution for fixing landscape mode input style
# author: blackbing at gmail dot com
# https://github.com/blackbing/jquery-landscape-input
*/


(function() {
  var $currentFocusIn, debounce, getScreen, isIphone;

  debounce = function(func, wait, immediate) {
    var args, context, result, timeout, timestamp;
    timeout = void 0;
    args = void 0;
    context = void 0;
    timestamp = void 0;
    result = void 0;
    return function() {
      var callNow, later;
      context = this;
      args = arguments;
      timestamp = new Date();
      later = function() {
        var last;
        last = (new Date()) - timestamp;
        if (last < wait) {
          return timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            return result = func.apply(context, args);
          }
        }
      };
      callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
      }
      return result;
    };
  };

  isIphone = navigator.userAgent.toLowerCase().indexOf("iphone") > 0;

  $currentFocusIn = null;

  getScreen = (function() {
    var h, tmp, w;
    w = $(window).width();
    h = $(window).height();
    if (w > h) {
      tmp = w;
      w = h;
      h = tmp;
    }
    return function() {
      var orientation, screen;
      orientation = Math.abs(window.orientation);
      if (orientation === 90) {
        screen = {
          width: h,
          height: w
        };
      } else {
        screen = {
          width: w,
          height: h
        };
      }
      return screen;
    };
  })();

  $.fn.landscapeInput = function() {
    var $this, checkKeyboard, handover, orientationchanged;
    $this = $(this);
    orientationchanged = function() {
      var $focusElement, $readyElement, orientation, _checkKeyboard;
      if (!$currentFocusIn) {
        return;
      }
      $focusElement = $currentFocusIn;
      $(window).off('resize.landscape');
      orientation = Math.abs(window.orientation);
      $readyElement = $focusElement.data('$readyElement');
      $readyElement.on('touchstart', function(e) {
        return e.stopPropagation();
      });
      $readyElement.appendTo('body');
      if (orientation === 90) {
        handover($focusElement, 'landscape');
        _checkKeyboard = debounce((function() {
          return checkKeyboard($readyElement);
        }), 200);
        if (!isIphone) {
          return $(window).on('resize.landscape', _checkKeyboard);
        } else {
          return $readyElement.one('blur.landscape', _checkKeyboard);
        }
      } else {
        return handover($focusElement, 'portrait');
      }
    };
    handover = function($focusElement, orientation, focus) {
      var $readyElement, value;
      if (orientation == null) {
        orientation = 'landscape';
      }
      if (focus == null) {
        focus = 'focus';
      }
      $readyElement = $focusElement.data('$readyElement');
      if (orientation === 'landscape') {
        value = $focusElement.val();
        $focusElement.blur();
        return $readyElement.val(value).show().prop('selectionStart', value.length).focus();
      } else if (orientation === 'portrait') {
        value = $readyElement.val();
        $readyElement.hide().remove();
        $focusElement.val(value);
        if (focus === 'focus') {
          return $focusElement.focus().prop('selectionStart', value.length);
        } else {
          return $focusElement.blur();
        }
      }
    };
    checkKeyboard = function($readyElement) {
      var inputHeight, keyboardHided, orientation, screen, screenHeight, screenWidth;
      orientation = Math.abs(window.orientation);
      if (orientation === 90) {
        screen = getScreen();
        screenHeight = screen.height;
        screenWidth = screen.width;
        inputHeight = $readyElement.height();
        keyboardHided = false;
        if (isIphone) {
          if ((inputHeight < screenHeight / 2) < 50) {
            keyboardHided = true;
          }
        } else {
          if ($readyElement.height() > screen.height / 2) {
            keyboardHided = true;
          }
        }
        if (keyboardHided) {
          return handover($currentFocusIn, 'portrait', 'dontfocus');
        }
      }
    };
    $(window).on('orientationchange.focusin', debounce(orientationchanged, 100));
    return $this.each(function(el) {
      var $el, $readyElement, placeholder, tagName;
      $el = $(this);
      tagName = $el.prop('tagName');
      placeholder = $el.prop('placeholder');
      $readyElement = $("<" + tagName + " placeholder='" + placeholder + "' style='position:fixed;left:0;top:0;z-index:999999999999;width:100%;height:100%;font-size:18px;display:none;'>");
      $el.data('$readyElement', $readyElement);
      return $el.on('focusin', function($event) {
        var o_changed, orientation;
        $el = $(this);
        orientation = Math.abs(window.orientation);
        $currentFocusIn = $el;
        o_changed = debounce(orientationchanged, 100);
        if (orientation === 90) {
          o_changed();
        }
        return $event.preventDefault();
      });
    });
  };

}).call(this);
